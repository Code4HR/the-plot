%rotate-back {
	@include transform(rotateX(-90deg));
	-webkit-transform-origin: center top;
	transform-origin: center top;
}

%rotate-front {
	@include transform(rotateX(90deg));
	-webkit-transform-origin: center bottom;
	transform-origin: center bottom;
}

%rotate-left {
	@include transform(rotateY(-90deg));
    -webkit-transform-origin: right center;
    transform-origin: right center;
}

%rotate-right {
	@include transform(rotateY(90deg));
	-webkit-transform-origin: left center;
	transform-origin: left center;
}

@mixin sizing($depth, $facade-width) {
	.top-side, .bottom-side, [class*="bottom_wall"], [class*="top_wall"] {
		height: $depth;
	}
	.right-side, .left-side, [class*="right_wall"], [class*="left_wall"] {
		width: $depth;
	}
}

%floor-base {
	.contents {
		position: relative;
		@include square(100%);
	}
	.room {
		opacity: 0;
		transition-duration: 0;
	}
	* {
		position: absolute;
		@include transition(all $skew-transition-duration);
		@include transform-style(preserve-3d);
	}
	[class*='side'] {
		border-width: 2px;
	}
	[class*='wall'] {
		border-width: 1px;
	}
	[class*='top'] {
		@extend %rotate-front;
	}
	[class*='right']:not(.chair) {
		@extend %rotate-right;
	}
	[class*='left']:not(.chair) {
		@extend %rotate-left;
	}
	[class*='bottom'] {
		@extend %rotate-back;
	}
	.top-side, .bottom-side, [class*="bottom_wall"] {
		left: 0;
	}
	.top-side, [class*="top_wall"] {
		bottom: 100%;
	}
	.bottom-side, [class*="bottom_wall"] {
		top: 100%;
	}
	.right-side, [class*="right_wall"] {
		top: 0;
		left: 100%;
	}
	.top-side, .bottom-side {
		border-left: none;
		border-right: none;
	}
	.left-side, [class*="left_wall"] {
		right: 100%;
	}
	[class*="right_wall"], [class*="left_wall"], .right-side, .left-side {
		height: 100%;
	}
	[class*="bottom_wall"], [class*="top_wall"], .top-side, .bottom-side {
		width: 100%;
	}
	[class*="right_wall"] {
		border-bottom: none;
	}
	[class*="left_wall"] {
		bottom: 0;
		border-top: none;
	}
	[class*="top_wall"] {
		right: 0;
	}
}

@mixin floor-sizing($width, $height, $floor-name, $post-transform-x, $post-transform-y, $pre-transform-x: 0px, $pre-transform-y: 0px, $pre-transform-z: 0px, $post-transform-z: 0px, $facade-width: $floor-depth) {
	@extend %floor-base;

	@include size($width, $height);

	$mid-z: 0;
	$mid-y: 0;
	$modifier: 10px;

	@if ($floor-name == "top-floor") {
		$mid-z: $pre-transform-z + (3 * $modifier);
		$mid-y: $pre-transform-y - (3 * $modifier);
	}
	@else if ($floor-name == "second-floor") {
		$mid-z: $pre-transform-z + $modifier;
		$mid-y: $pre-transform-y - $modifier;
	}
	@else if ($floor-name == "third-floor") {
		$mid-z: $pre-transform-z - $modifier;
		$mid-y: $pre-transform-y + $modifier;
	}
	@else {
		$mid-z: $pre-transform-z - (3 * $modifier);
		$mid-y: $pre-transform-y + (3 * $modifier);
	}

	.facade {
		@include size($facade-width, $height);
	}
	.contents {
		@include transform(rotateX(90deg) rotateZ(-90deg) translateZ($pre-transform-z) translateX($pre-transform-x) translateY($pre-transform-y));
		> .room {
			@include transform(translateZ(-($facade-width - $floor-depth)));
		}
	}
	.rotated & {
		.contents {
			@include animation(#{$floor-name} $split-transition-duration + $skew-transition-duration forwards);
		}
	}
	@at-root {
		@include keyframes(#{$floor-name}) {
			50% {
				@include transform(rotateX(90deg) rotateZ(-90deg) translateZ($mid-z) translateX($pre-transform-x) translateY($mid-y));
			}
			100% {
				@include transform(translateY($post-transform-y) rotateX(20deg) rotateZ(-30deg) translateX($post-transform-x) translateZ($post-transform-z));
			}
		}
	}
}

@mixin floor-styling($color, $floor-name) {
	*:not([class="facade"]) {
		border-color: $color;
	}
	.window {
		border-color: $facade-color;
		transform: none !important;
	}
	[class*="leg"] {
		background: $color;
	}
	[class*='side'], [class*='wall'] {
		background: rgba($color, 0.15);
	}
	svg * {
		@include transition(all 250ms);
	}
	.rotated & {
		.facade svg {
			@include animation(#{$floor-name}-facade $split-transition-duration + $skew-transition-duration forwards);
			* {
				stroke: lighten($color, 25%);
			}
		}
		.room {
			opacity: 1;
			transition-delay: $split-transition-duration;
			transition-duration: $skew-transition-duration / 1.75;
		}
	}
	@at-root {
		@include keyframes(#{$floor-name}-facade) {
			50% {
				opacity: 1;
			}
			100% {
				opacity: 0;
			}
		}
	}
}