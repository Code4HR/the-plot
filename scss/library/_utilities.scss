%rotate-back {
	@include transform(rotateX(-90deg));
	-webkit-transform-origin: center top;
	transform-origin: center top;
}

%rotate-front {
	@include transform(rotateX(90deg));
	-webkit-transform-origin: center bottom;
	transform-origin: center bottom;
}

%rotate-left {
	@include transform(rotateY(-90deg));
    -webkit-transform-origin: right center;
    transform-origin: right center;
}

%rotate-right {
	@include transform(rotateY(90deg));
	-webkit-transform-origin: left center;
	transform-origin: left center;
}

@mixin sizing($depth, $facade-width) {
	.top-side, .bottom-side, [class*="bottom_wall"], [class*="top_wall"] {
		height: $depth;
	}
	.right-side, .left-side, [class*="right_wall"], [class*="left_wall"] {
		width: $depth;
	}
	.ground {
		@include transform(translateZ(-$depth));
	}
}

%floor-base {
	.rooms, .contents, .ground {
		@include square(100%);
	}
	.contents {
		position: relative;
	}
	.rooms {
		@include transform(rotateZ(-90deg));
	}
	.room {
		opacity: 0;
		transition-duration: 0;
	}
	.number {
		@include transform(rotateX(-38deg) rotateZ(24deg) rotateY(-15deg));
		@include square(23px);
		pointer-events: auto;
		cursor: default;
		.circle {
			@include border-radius(50%);
			@include square(100%);
			text-align: center;
			line-height: 23px;
			opacity: 0;
			transition-duration: 0;
			font-size: 13px;
			color: white;
		}
		.detail {
			pointer-events: none;
			opacity: 0;
			@include size(500%, 200%);
			border-width: 2px;
			color: white;
			bottom: 130%;
			margin-left: -200%;
		}
		&.empty {
			.circle {
				background: $background-color;
				border-width: 1px;
			}
		}
		&:hover, &.hover {
			.detail {
				opacity: 1;
			}
		}
	}
	.ground {
		@include transition(opacity 250ms);
		opacity: 0;
		pointer-events: auto;
		&:hover {
			opacity: 1;
		}
	}
	* {
		position: absolute;
		@include transition(all $skew-transition-duration);
		@include transform-style(preserve-3d);
	}
	[class*='side'] {
		border-width: 2px;
	}
	[class*='wall'] {
		border-width: 1px;
	}
	[class*='top'] {
		@extend %rotate-front;
	}
	[class*='right']:not(.chair) {
		@extend %rotate-right;
	}
	[class*='left']:not(.chair) {
		@extend %rotate-left;
	}
	[class*='bottom'] {
		@extend %rotate-back;
	}
	.top-side, .bottom-side, [class*="bottom_wall"] {
		left: 0;
	}
	.top-side, [class*="top_wall"] {
		bottom: 100%;
	}
	.bottom-side, [class*="bottom_wall"] {
		top: 100%;
	}
	.right-side, [class*="right_wall"] {
		top: 0;
		left: 100%;
	}
	.top-side, .bottom-side {
		border-left: none;
		border-right: none;
	}
	.left-side, [class*="left_wall"] {
		right: 100%;
	}
	[class*="right_wall"], [class*="left_wall"], .right-side, .left-side {
		height: 100%;
	}
	[class*="bottom_wall"], [class*="top_wall"], .top-side, .bottom-side {
		width: 100%;
	}
	[class*="right_wall"] {
		border-bottom: none;
	}
	[class*="left_wall"] {
		bottom: 0;
		border-top: none;
	}
	[class*="top_wall"] {
		right: 0;
	}
}

@mixin floor-sizing($width, $height, $facade-height-ratio, $floor-name, $facade-translate-y, $facade-translate-x, $svg-translate-x, $svg-translate-y, $post-transform-x, $post-transform-y, $pre-transform-x: 0px, $pre-transform-y: 0) {
	@extend %floor-base;

	@include size($width, $height);

	$mid-x: 0;
	$mid-z: 0;
	$modifier: 20px;

	@if ($floor-name == "top-floor") {
		$mid-x: -($modifier + $modifier/2);
		$mid-z: $modifier + $modifier/2;
	}
	@else if ($floor-name == "second-floor") {
		$mid-x: -($modifier/2);
		$mid-z: $modifier/2;
	}
	@else if ($floor-name == "third-floor") {
		$mid-x: $modifier/2;
		$mid-z: -($modifier/2);
	}
	@else {
		$mid-x: $modifier + $modifier/2;
		$mid-z: -($modifier + $modifier/2);
	}
	.facade {
		@include size($height, $facade-height-ratio * $height);
		left: 50%;
		margin-left: -0.5 * $height;
		svg {
			> g {
				@include transform(translateY($facade-translate-y) translateX($facade-translate-x));
				@include transition(all 200ms);
			}
		}
	}
	.contents {
		@include transform(rotateX(90deg));
		.rooms {
			@include transform(rotateZ(-90deg) translateX($pre-transform-x) translateY($pre-transform-y));
		}
		> .room {
			@include transform(translateZ(-($facade-height-ratio * $height - $floor-depth)));
		}
	}
	.rotated & {
		svg {
			@include animation(#{$floor-name}-facade $split-transition-duration + $skew-transition-duration forwards);
		}
		.contents {
			@include animation(#{$floor-name} $split-transition-duration + $skew-transition-duration forwards);
		}
	}
	@at-root {
		@include keyframes(#{$floor-name}) {
			50% {
				@include transform(rotateX(90deg) translateX($mid-x) translateZ($mid-z));
			}
			100% {
				@include transform(translateY($post-transform-y) rotateX(20deg) rotateZ(60deg) translateX($post-transform-x));
			}
		}
	}
	@at-root {
		@include keyframes(#{$floor-name}-facade) {
			50% {
				@include transform(scale(0.75) translateX($svg-translate-x) translateY($svg-translate-y));
				opacity: 1;
			}
			100% {
				@include transform(scale(0.75) translateX(0.25 * 0.5 * $facade-translate-x) translateY(0.25 * 0.5 * $facade-translate-y));
				opacity: 0;
			}
		}
	}
}

@mixin floor-styling($color, $floor-name) {
	*:not([class="facade"]) {
		border-color: $color;
	}
	[class*="leg"], .number:not(.empty) .circle {
		background: $color;
	}
	[class*='side'], [class*='wall'], .ground {
		background: rgba($color, 0.15);
	}
	svg * {
		@include transition(all 250ms);
	}
	.rotated & {
		.facade svg {
			* {
				stroke: lighten($color, 35%);
			}
			.need_fill * {
				fill: lighten($color, 35%);
				stroke: none;
			}
		}
		.room, .number .circle {
			opacity: 1;
		}
		.room {
			transition-delay: $split-transition-duration;
			transition-duration: $skew-transition-duration / 1.75;
		}
		.number .circle {
			transition-delay: 2 * $split-transition-duration;
			transition-duration: 200ms;
		}
	}
}